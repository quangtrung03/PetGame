import React, { useEffect, useState } from 'react';
import { getDailyMissions, completeMission, claimMissionReward } from '../api/dailyMissions';
import { getAchievements } from '../api/achievements';
import { useToast } from '../context/ToastContext';

const DailyMissions = () => {
  const [missions, setMissions] = useState([]);
  const [achievements, setAchievements] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('missions');
  const { addToast } = useToast();

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setLoading(true);
    try {
      const [missionRes, achievementRes] = await Promise.all([
        getDailyMissions(),
        getAchievements()
      ]);
      // Backend tr·∫£ v·ªÅ { success, message, data }
      setMissions(missionRes.data?.data?.missions || missionRes.data?.missions || []);
      setAchievements(achievementRes.data?.data?.achievements || achievementRes.data?.achievements || []);
    } catch (err) {
      addToast('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu', 'error');
    } finally {
      setLoading(false);
    }
  };

  const handleComplete = async (code) => {
    try {
      await completeMission(code);
      addToast('ƒê√£ ho√†n th√†nh nhi·ªám v·ª•!', 'success');
      loadData();
    } catch (err) {
      addToast('Kh√¥ng th·ªÉ ho√†n th√†nh nhi·ªám v·ª•', 'error');
    }
  };

  const handleClaim = async (code) => {
    try {
      await claimMissionReward(code);
      addToast('ƒê√£ nh·∫≠n th∆∞·ªüng!', 'success');
      loadData();
    } catch (err) {
      addToast('Kh√¥ng th·ªÉ nh·∫≠n th∆∞·ªüng', 'error');
    }
  };

  const renderProgressBar = (current, target) => {
    const percentage = Math.min((current / target) * 100, 100);
    return (
      <div className="w-full bg-gray-200 rounded-full h-2">
        <div 
          className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
          style={{ width: `${percentage}%` }}
        ></div>
      </div>
    );
  };

  const getMissionIcon = (type) => {
    const icons = {
      feed_pets: 'üçñ',
      play_with_pets: 'üéæ',
      use_abilities: '‚ú®',
      earn_coins: 'üí∞',
      spend_coins: 'üí∏',
      buy_items: 'üõí',
      level_up_pets: '‚≠ê',
      win_minigames: 'üéÆ'
    };
    return icons[type] || 'üìã';
  };

  const getAchievementIcon = (name) => {
    const icons = {
      'First Pet': 'üêæ',
      'Pet Lover': '‚ù§Ô∏è',
      'Feeder': 'üçñ',
      'Player': 'üéæ',
      'Pet Master': 'üëë',
      'Trainer': 'üèÜ'
    };
    return icons[name] || 'üèÖ';
  };

  return (
    <div className="max-w-4xl mx-auto py-8 px-4">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">üìã Nhi·ªám v·ª• & Th√†nh t√≠ch</h1>
        <p className="text-gray-600">Ho√†n th√†nh nhi·ªám v·ª• h√†ng ng√†y v√† m·ªü kh√≥a th√†nh t√≠ch ƒë·ªÉ nh·∫≠n th∆∞·ªüng!</p>
      </div>

      {/* Tab Navigation */}
      <div className="bg-white rounded-lg shadow-md mb-6">
        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8 px-6">
            <button
              onClick={() => setActiveTab('missions')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'missions'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              üìã Nhi·ªám v·ª• h√†ng ng√†y
            </button>
            <button
              onClick={() => setActiveTab('achievements')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'achievements'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              üèÜ B·∫£ng th√†nh t√≠ch
            </button>
          </nav>
        </div>

        <div className="p-6">
          {loading ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-4 text-gray-600">ƒêang t·∫£i...</p>
            </div>
          ) : (
            <>
              {/* Missions Tab */}
              {activeTab === 'missions' && (
                <div className="space-y-4">
                  <div className="mb-4">
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      Nhi·ªám v·ª• h√¥m nay ({missions.filter(m => m.isCompleted).length}/{missions.length})
                    </h3>
                    <div className="bg-gray-200 rounded-full h-3">
                      <div 
                        className="bg-gradient-to-r from-blue-500 to-purple-600 h-3 rounded-full transition-all duration-300"
                        style={{ width: `${missions.length > 0 ? (missions.filter(m => m.isCompleted).length / missions.length) * 100 : 0}%` }}
                      ></div>
                    </div>
                  </div>

                  {missions.length === 0 ? (
                    <div className="text-center py-8">
                      <span className="text-6xl mb-4 block">üìã</span>
                      <h3 className="text-xl font-medium text-gray-900 mb-2">Ch∆∞a c√≥ nhi·ªám v·ª• n√†o</h3>
                      <p className="text-gray-600">H√£y quay l·∫°i sau ƒë·ªÉ nh·∫≠n nhi·ªám v·ª• m·ªõi!</p>
                    </div>
                  ) : (
                    missions.map(mission => (
                      <div key={mission._id} className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                        <div className="flex items-start justify-between">
                          <div className="flex items-start space-x-4 flex-1">
                            <span className="text-3xl">{getMissionIcon(mission.type)}</span>
                            <div className="flex-1">
                              <h4 className="font-semibold text-gray-900">{mission.title}</h4>
                              <p className="text-gray-600 text-sm mb-2">{mission.description}</p>
                              
                              <div className="flex items-center space-x-4 mb-2">
                                <div className="flex-1">
                                  {renderProgressBar(mission.currentProgress, mission.targetProgress)}
                                </div>
                                <span className="text-sm font-medium text-gray-700">
                                  {mission.currentProgress}/{mission.targetProgress}
                                </span>
                              </div>

                              <div className="flex items-center justify-between">
                                <span className="text-sm text-green-600 font-medium">
                                  üéÅ Ph·∫ßn th∆∞·ªüng: {mission.reward?.coins || 0} coins
                                  {mission.reward?.xp > 0 && ` + ${mission.reward.xp} XP`}
                                </span>
                                <span className="text-xs text-gray-500">
                                  H·∫øt h·∫°n: {new Date(mission.expiresAt).toLocaleDateString('vi-VN')}
                                </span>
                              </div>
                            </div>
                          </div>

                          <div className="ml-4">
                            {mission.isCompleted ? (
                              mission.isClaimed ? (
                                <span className="bg-gray-100 text-gray-500 px-4 py-2 rounded-lg text-sm font-medium">
                                  ‚úÖ ƒê√£ nh·∫≠n th∆∞·ªüng
                                </span>
                              ) : (
                                <button
                                  onClick={() => handleClaim(mission.code)}
                                  className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors font-medium"
                                >
                                  üéÅ Nh·∫≠n th∆∞·ªüng
                                </button>
                              )
                            ) : (
                              <span className="bg-blue-100 text-blue-600 px-4 py-2 rounded-lg text-sm font-medium">
                                ‚è≥ ƒêang th·ª±c hi·ªán
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    ))
                  )}
                </div>
              )}

              {/* Achievements Tab */}
              {activeTab === 'achievements' && (
                <div className="space-y-4">
                  <div className="mb-4">
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">
                      B·∫£ng th√†nh t√≠ch ({achievements.filter(a => a.isUnlocked).length}/{achievements.length})
                    </h3>
                    <div className="bg-gray-200 rounded-full h-3">
                      <div 
                        className="bg-gradient-to-r from-yellow-500 to-orange-600 h-3 rounded-full transition-all duration-300"
                        style={{ width: `${achievements.length > 0 ? (achievements.filter(a => a.isUnlocked).length / achievements.length) * 100 : 0}%` }}
                      ></div>
                    </div>
                  </div>

                  {achievements.length === 0 ? (
                    <div className="text-center py-8">
                      <span className="text-6xl mb-4 block">üèÜ</span>
                      <h3 className="text-xl font-medium text-gray-900 mb-2">Ch∆∞a c√≥ th√†nh t√≠ch n√†o</h3>
                      <p className="text-gray-600">H√£y chƒÉm s√≥c pet ƒë·ªÉ m·ªü kh√≥a th√†nh t√≠ch!</p>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {achievements.map(achievement => (
                        <div 
                          key={achievement._id} 
                          className={`rounded-lg p-4 border-2 ${
                            achievement.isUnlocked 
                              ? 'bg-gradient-to-r from-yellow-50 to-orange-50 border-yellow-300' 
                              : 'bg-gray-50 border-gray-200'
                          }`}
                        >
                          <div className="flex items-start space-x-3">
                            <span className={`text-3xl ${achievement.isUnlocked ? 'grayscale-0' : 'grayscale'}`}>
                              {getAchievementIcon(achievement.name)}
                            </span>
                            <div className="flex-1">
                              <h4 className={`font-semibold ${achievement.isUnlocked ? 'text-gray-900' : 'text-gray-500'}`}>
                                {achievement.name}
                              </h4>
                              <p className={`text-sm ${achievement.isUnlocked ? 'text-gray-700' : 'text-gray-400'}`}>
                                {achievement.description}
                              </p>
                              <div className="mt-2 flex items-center justify-between">
                                <span className={`text-sm font-medium ${
                                  achievement.isUnlocked ? 'text-yellow-600' : 'text-gray-400'
                                }`}>
                                  üéÅ {achievement.reward?.coins || 0} coins
                                  {achievement.reward?.xp > 0 && ` + ${achievement.reward.xp} XP`}
                                </span>
                                {achievement.isUnlocked && (
                                  <span className="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded">
                                    ‚úÖ ƒê√£ m·ªü kh√≥a
                                  </span>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default DailyMissions;
